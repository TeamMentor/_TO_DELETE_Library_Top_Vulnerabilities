<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1458247740" Content_Hash="913445577">
  <Metadata>
    <Id>8186c76a-d532-4bc3-9196-cd24c5e17d6d</Id>
    <Id_History>916e141f-7747-4b74-b14b-dd6fc5de5d00,</Id_History>
    <Library_Id>386553fa-9f33-4b11-b0bc-eb64b8d787ce</Library_Id>
    <Title>How to Test for Chosen Plaintext Vulnerabilities</Title>
    <Category>Cryptography</Category>
    <Phase>Test</Phase>
    <Technology> Any</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Chosen Plaintext Vulnerabilities</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <ul>
    <li>Public and private key encryption algorithms</li>
  </ul>
  <h1>Summary</h1>
  <p>The adversary's ideal goal when attacking cryptographic systems is to recover the cryptographic key or to decipher specific encrypted information.&amp;nbsp;In the ideal case, a remote adversary can only sniff the encrypted packets; they can't manipulate either the text before encryption (plaintext) or the text after encryption (ciphertext).&amp;nbsp;A chosen plaintext bug allows adversaries to choose any particular plaintext they want. The adversary tricks the victim in to encrypting their own plaintext (<i>P</i>) and gathers useful information from the resulting ciphertext (<i>C</i>).&amp;nbsp; &amp;nbsp;&amp;nbsp;</p>
  <p>The following steps are recommended to test for chosen plaintext bugs:</p>
  <ul>
    <li>Step 1: Understand Attack Scenarios 
</li>
    <li>Step 2: Analyze Root Causes and Mitigations 
</li>
    <li>Step 3: Start Testing and Exploring 
</li>
    <li>Step 4: Tune Test Cases</li>
  </ul>
  <h1>Step 1: Understand Attack Scenarios</h1>
  <p>First, you need to understand the details of chosen plaintext attacks. The basic concept of a chosen plaintext attack is really simple: an attacker chooses <i>plaintext</i> to feed the encryption algorithm they want to break.&amp;nbsp;There are two scenarios associated with this kind of bug:</p>
  <ul>
    <li>Scenario 1: Batched or offline chosen plaintext attack 
</li>
    <li>Scenario 2: Adaptive or online chosen plaintext attack&amp;nbsp;&amp;nbsp; </li>
  </ul>
  <h2>Scenario 1: Batched or offline chosen plaintext attack</h2>
  <p>In the batched scenario, the attacker possesses all of the plaintext beforehand (prior to launching the attack and obtaining any ciphertext).&amp;nbsp;The attacker then encrypts the plaintext with the encryption system in question, finally obtaining the corresponding ciphertext. This attack is commonly used in attempting to brute-force the private key of the encryption system.&amp;nbsp;</p>
  <h2>Scenario 2: Adaptive or online chosen plaintext attack</h2>
  <p>In an online chosen plaintext attack, the attacker starts by reading one or more plaintext blocks and their corresponding ciphertext.&amp;nbsp;The attacker then generates new plaintext blocks based on information from previous sniffed packets.&amp;nbsp;The attacker then forces the victim to encrypt the new plaintext blocks; and finally, the attacker reads the ciphertext produced by their chosen plaintext blocks.&amp;nbsp;A common use of this attack is to steal sensitive information like passwords or credit card numbers.&amp;nbsp; </p>
  <p>For instance, the attacker starts monitoring encrypted network traffic between a client and server. After some analysis, the attacker realizes that the client password is sent at a specific offset of a packet (<i>C</i>). The attacker wants to know if the plaintext <i>P</i> that produced the encrypted password (<i>C</i>) is equivalent to another chosen plaintext <i>P'</i><i>.</i> If the system suffers from a chosen plaintext vulnerability, the attacker creates different plaintexts <i>Pk'</i>&amp;nbsp;and forces the victim to use them in its following transmissions (which the attacker will also sniff). &amp;nbsp;or each plaintext&amp;nbsp;<i>Pk'</i>&amp;nbsp;the attacker checks if the ciphertext <i>Ck'</i>&amp;nbsp;is <i>equivalent</i> to <i>C.&amp;nbsp;</i>If they are equivalent the chosen plaintext <i>Pk'&amp;nbsp;</i>is equal to the client's password:&amp;nbsp;&amp;nbsp; </p>
  <p>
    <i>C = E(K, P)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </i>
  </p>
  <p>
    <i>Ck'; = E(K, Pk';)</i>
  </p>
  <p>If <i>Ck'&amp;nbsp;</i><i>Ëœ</i><i> C </i>then <i>Pk'= P.</i></p>
  <p>If the attack is successful, the attacker controls <i>Pk'</i>&amp;nbsp;and can read both <i>C</i> and <i>Ck'. </i>The only unknown values above are the encryption key (<i>K</i>) and the client's password (<i>P</i>).<i>&amp;nbsp;&amp;nbsp;</i>&amp;nbsp;</p>
  <p>Encryption systems require <i>block cipher modes</i> to allow for encryption of more than one cipher block.&amp;nbsp;We say that a ciphertext in <i>Ck'&amp;nbsp;</i>must be to <i>equivalent</i> to&amp;nbsp;<i>C </i>because <i>Ck'&amp;nbsp;</i>lives in a separate block (sent later) so it undergoes the cipher mode modification. Nonetheless, if the attacker deduces this equivalence, they can verify if any of the predicted passwords in <i>Pk'</i>&amp;nbsp;are valid.&amp;nbsp;A system that uses insecure cipher modes (such as ECB) or is poorly implemented (i.e. using a predictable initialization vector or <i>IV</i>) exposes itself to this variant of the attack.&amp;nbsp; </p>
  <h1>Step 2: Analyze Root Cause and Mitigations</h1>
  <p>The next step is to analyze what causes chosen plaintext vulnerabilities and how to prevent them. Knowing the root cause of security vulnerabilities helps you to identify them in both design and implementation (source code).&amp;nbsp;&amp;nbsp; </p>
  <h2>Root Causes</h2>
  <p>Any design, implementation, configuration, or deployment condition that leads to an <i>attacker controlling the plaintext&amp;nbsp;</i><i>that the victim encrypts </i>is a root cause of a chosen plaintext bug.</p>
  <p>However, it is difficult to pinpoint the actual root causes for this vulnerability. Picture a cryptography scenario wherein Alice sends Bob an encrypted message. Alice encrypts a message on her computer before sending it to Bob. An eavesdropper monitoring the encrypted communication is unable to change any of the plaintext, as the plaintext exists only on Alice's computer prior to encryption and transmission.&amp;nbsp; </p>
  <p>To execute a chosen plaintext attack, the adversary needs to somehow infiltrate the victim's machine, or remotely force the victim to select the plaintext of their choice. Any situation that allows a victim to encrypt the adversary's plaintext is a root cause of this vulnerability. The challenge here is that these circumstances might fall outside of the encryption system's responsibility. For example, the adversary might install a Trojan horse on Alice's computer which is then later used to replace any of Alice's plaintext before it is encrypted. If the plaintext is replaced with that of the adversary's choice, the resulting ciphertext is that of the chosen plaintext after encryption. The root cause here is that the victim previously allowed the attacker to install a trojan horse program, rather than a flaw in the encryption system itself.</p>
  <h2>Mitigations</h2>
  <p>Although there are multiple mitigations against this attack; none offer a complete solution. In order to exploit this vulnerability, the adversary must choose from different attack avenues such as installing spyware, remotely corrupting the victim's file system, or otherwise forcing the victim to append the attacker's plaintext as part of an encrypted message. Thus, possible mitigations include running up to date malware protection, hardening the operating system, and not including anonymous text in encrypted messages. This emphasizes that there are many mitigations to aid in preventing this attack, and a defense in depth approach must be taken to minimize the overall risk.</p>
  <h1>Step 3: Start Testing and Exploring</h1>
  <p>Now that you've learned about chosen plaintext attack scenarios, what causes them, and how to prevent them, you must test for secure and insecure implementations.</p>
  <p>
    <b>
      <i>
      </i>
    </b>
  </p>
  <h2>Testing against an offline chosen plaintext attack</h2>
  <ol>
    <li>Select a victim. 
</li>
    <li>Produce block(s) of plaintext that you wish to see enciphered. 
</li>
    <li>Force the victim to encrypt the block(s) of plaintext produced in step 2. 
</li>
    <li>Collect the resulting ciphertext for your chosen plaintext.</li>
  </ol>
  <p>Expected Result: The test succeeds if you can't get the victim to encipher the produced plaintext block(s) (step 3).&amp;nbsp; It fails if you are able to execute steps 3 and 4.&amp;nbsp;</p>
  <h2>Testing against an online chosen plaintext attack</h2>
  <ol>
    <li>Select a victim client. 
</li>
    <li>Select a victim server. 
</li>
    <li>Start sniffing network traffic between the client and server. 
</li>
    <li>Read a number of messages between the server and the client. 
</li>
    <li>Using information in the messages read, produce the plaintext you wish to force the server or the client to encrypt and send. 
</li>
    <li>Force the victim server/client to encrypt the chosen plaintext from step 5. 
</li>
    <li>Keep sniffing the network traffic until you see the resulting cipher text for the chosen plaintext in step 5.</li>
  </ol>
  <p>Expected Result: The test succeeds if you can't get the server to encipher the chosen plaintext (step 6). It fails if you are able to execute steps 6 and 7.</p>
  <p>These two high level cases show the basic details on how to test against a chosen plaintext attack. Make sure to cover both cases when testing your encryption system. During this step, you must be exploring ways of validating your test cases.&amp;nbsp; You must find a way to verify that your chosen plaintext is actually being encrypted and to match your chosen plaintext with its encrypted equivalent. This will most likely require you to learn the protocol used between your target clients and servers, as well as exploration by trial and error.</p>
  <h1>Step 4: Tune Test Cases</h1>
  <p>Now that you've gone over the basic tests against chosen plaintext bugs, you must revise additional testing details and implications depending on the system under attack.</p>
  <h2>Attack Avenues</h2>
  <p>Chosen plaintext attacks have a fundamental requirement: <i>the adversary needs to trick the victim into encrypting his chosen plaintext.&amp;nbsp; </i></p>
  <p>A good example of applied chosen-plaintext testing attack avenues were presented along with an SSL chosen-plaintext vulnerability. You've also seen some examples above. This list presents a good set of attack avenues that you need to try:</p>
  <ul>
    <li>Installing spyware or Trojan horse in the victim's system that modifies the chosen plaintext before it is encrypted by the victim. 
</li>
    <li>Sending the chosen plaintext to the target in an attempt that the victim encrypts it in a reply. 
</li>
    <li>Storing the chosen plaintext in a data store that will be later encrypted by the victim. 
</li>
    <li>Sending the chosen plaintext as part of a plug-in installation. 
</li>
    <li>Hijacking an encryption API and executing the encryption function from the tester's console, with the chosen plaintext, but in the victim's context (impersonating the victim). 
</li>
    <li>Executing arbitrary code in the victim's context that calls the encryption procedure from that victim's context.</li>
  </ul>
  <p>As you can see, there are many routes to test for chosen plaintext bugs; and additional exploits appear frequently in the Internet. It is important that you cover these routes and keep up with the latest attack avenues and techniques when testing against this class of bug.</p>
  <p />
  <h2>Attack Methods</h2>
  <p>As seen, it is possible to execute two different attack methods by exploiting chosen plaintext bugs:</p>
  <h3>Breaking Encryption</h3>
  <p>The first method seen is that of recovering the encryption key of the encryption algorithm in use. In general cryptography, the encryption and decryption routines are publically known since they should not be broken in a feasible time period with a strong key length. However, sometimes cryptosystems utilize insufficiently large key sizes such as a 56-bit key paired with outdated algorithms like DES. There are different ways to break an encryption algorithm and recover the key using appropriate cryptanalysis methods, and this process can be much easier if the attacker has control of the plaintext.</p>
  <h3>Stealing Sensitive Data </h3>
  <p>In the second scenario you saw how to execute an information disclosure attack on the victim's password using a chosen plaintext bug. When executing this payload the attacker is not trying to calculate the encryption key. The attacker's goal is to reveal an unknown plaintext (the user's password). The attacker has access to the ciphertext produced by the unknown plaintext. Furthermore, if a chosen plaintext bug exists, the attacker controls future plaintexts and therefore their resulting ciphertext. The attacker produces plaintexts to send in to the encryption systems, in hopes that one of them will be equal to the original plaintext; the attacker then compares the produced ciphertexts with the original ciphertext to see if the plaintext has been discovered.&amp;nbsp;&amp;nbsp;</p>
  <p>Ensure that you focus on testing one attack method at a time, rather than trying to test both simultaneously.</p>
  <h1>Conclusions</h1>
  <p>Chosen plaintext attacks are common in cryptography systems and have various potential implications.&amp;nbsp; The attacker uses this class of attack to compute the system's private encryption key, or in an attempt to discover secret plaintext such as a password or credit card number.&amp;nbsp; You must understand the basic attack scenarios for this class of attack, what causes them, and how to prevent them.&amp;nbsp; Then, test your application through its different attack avenues to reveal any vulnerabilities in your system.&amp;nbsp; Finish by tuning your test cases with the different attack methods presented here.</p>
  <h1>Additional Resources</h1>
  <p>
  </p>
  <ul>
    <li>For information about a SSL chosen-plaintext vulnerability, see&amp;nbsp;<a href="http://citeseer.ist.psu.edu/cache/papers/cs/30519/http:zSzzSzeprint.iacr.orgzSz2004zSz111.pdf/bard04vulnerability.pdf">http://citeseer.ist.psu.edu/cache/papers/cs/30519/http:zSzzSzeprint.iacr.orgzSz2004zSz111.pdf/bard04vulnerability.pdf</a></li>
    <li>For information about cryptanalysis, see&amp;nbsp;<a href="http://en.wikipedia.org/wiki/Cryptanalysis">http://en.wikipedia.org/wiki/Cryptanalysis</a></li>
  </ul>
  <p />
  <p />
  <div>
  </div>
  <ul>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>