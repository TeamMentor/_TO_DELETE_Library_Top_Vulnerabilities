<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1539181507" Content_Hash="-1717482413">
  <Metadata>
    <Id>2cecf5db-7a47-4623-8d1b-74f1b9201288</Id>
    <Id_History>df68bd0d-a10e-401c-b772-08e41a8550de,</Id_History>
    <Library_Id>386553fa-9f33-4b11-b0bc-eb64b8d787ce</Library_Id>
    <Title>How to Test for Cross Site Scripting Vulnerabilities</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Test</Phase>
    <Technology> Any</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Cross Site Scripting Vulnerabilities</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Applications that manipulate HTML input and output</li>
  </ul>
  <p />
  <h1>Summary</h1>
  <p>Cross site scripting (or XSS) is a well known HTML-related security vulnerability that commonly affects Internet clients through XSS vulnerable servers. A XSS bug in a web server allows an attacker to send malicious payload to a victim browser through the vulnerable server. Payloads may also execute in other HTTP clients not necessarily focused at browsing the web as long as they render HTML and execute any execute scripts. </p>
  <p>Below is a summary of steps needed for testing for XSS bugs</p>
  <ul>
    <li>
      Step 1: Understand XSS attack scenarios 
</li>
    <li>
      Step 2: List high risk componentsandentry points 
</li>
    <li>
      Step 3: Start testing and exploring 
</li>
    <li>
      Step 4: Tune test case data</li>
  </ul>
  <h1>
    <b>Step1: Understand XSS Attack Scenarios</b>
  </h1>
  <p>There are two types of XSS: reflective and persistent. A reflective XSS bug occurs when the web server takes input from a visitor and automatically sends him back the input without checking if the data inputted contains a script. Thus, the input data is reflected to the visitor and executes at the visitor's browser.&amp;nbsp;</p>
  <p>A persistent XSS bug is when a script embedded in malicious data is stored in a persistent store such as database, a file, or other storing mechanism. The malicious data containing a script persists in the server. If the server application takes this stored content and sends it to the client without validating its contents, the script will be executed in the browser.&amp;nbsp;</p>
  <p>It is important to understand both XSS attack scenarios to know what to look at when testing.</p>
  <h1>
    <b>Step 2: List High Risk Components and Entry Points</b>
  </h1>
  <h2>Identify high risk components</h2>
  <p>The next step in testing for XSS bugs is to do an extensive and careful revision of components that take input data from Internet clients and use send it back to the client. In case of large web services, documentation such as design or architectural, if available, become real handy at this point. Testers need to think about what components reflect data to a web client (for reflective XSS) and store data which is later send to a web client (for persistent XSS). Common components that do this include:&amp;nbsp;</p>
  <p>
  </p>
  <ul>
    <li>Search web pages</li>
    <li>Profile-related web pages</li>
    <li>Web forums</li>
    <li>Blogs</li>
    <li>RSS feeds</li>
    <li>HTML-based help browsers for thick clients&amp;nbsp;</li>
  </ul>
  <p />
  <h2>Look for code that writes HTML responses</h2>
  <p>There are many different scripting functions that append HTML to the server response. Finding the server-side code that writes data out is the first step evaluating and finding potential XSS issues. Functions to write data to a response vary depending on the language and platform you're testing. Be certain that you understand all the relevant functions in the language you're using.</p>
  <h2>Check for non-validated and unencoded data in responses</h2>
  <p>Next, check what is being output by the mechanisms above.&amp;nbsp;Even if the data written out by an application comes directly from the user and has not been specifically validated for format, if it is appropriately encoded, it can still be safe.&amp;nbsp; That said, the encoding must take the form of a whitelist of known-safe characters (generally only the alphanumerics), not a blacklist as is commonly attempted.</p>
  <h2>Match high risk components with entry points</h2>
  <p>Non-validated data comes from all of the application's entry points, not just the web. Be certain to cover all the possible sources of malicious data which might get passed to a client. Common data sources include:</p>
  <ul>
    <li>Web forms 
</li>
    <li>URL contents 
</li>
    <li>Cookie contents 
</li>
    <li>Flash parameters 
</li>
    <li>SQL database query contents 
</li>
    <li>Web service data 
</li>
    <li>Graphical User Interface</li>
  </ul>
  <p>List the high risk variables in the application and their data sources to make sure that they are covered during review and testing.<img src="about:../../../LibrariesImages/72525c65-a233-49df-8821-a45107b7e327/clip_image007.png" /></p>
  <h1>
    <b>Step 3: Start Test and Exploring&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </b>
  </h1>
  <p>During this step testing is focused at submitting basic XSS fuzz strings and observing how the application reacts, and then trying to display a simple alert box that proves the existence of an XSS bug.</p>
  <h2>Start with a simple fuzz string</h2>
  <p>Success in finding XSS bugs depends on whether the tester is able to store or reflect an HTML script in or through the server. In almost all cases scripts are included in between <i>SCRIPT </i>tags (other tags also worked as explained later). During this step, it is recommended to start exploring how the server application's high risk components react to tag related input. A good idea is to start testing a simple fuzz string like this one:</p>
  <p>
    <font face="'Courier New'">'&gt;;!--"&gt;&lt;XYZ&gt;&lt;=&amp;{()}</font>
  </p>
  <p>Then look for the string <i>XYZ </i>in server's response to see how the server processed the special script related characters. It might turn out that the server uses the string inside of a tag:</p>
  <p>
    <font face="'Courier New'">&lt;input type="text" name="keyword" id="keyword" maxlength="255" value=<a name="line163"></a>"'&gt;;!--"&gt;&lt;XYZ&gt;&lt;=&amp;{()}" style="height:10px; color:#000;" /&gt;</font>
  </p>
  <p>Continue by modifying the initial string to try displaying an alert. The double quotes of the original fuzz string closed the <i>value</i> property so whatever came before doesn't matter. Also, after the closing parenthesis next to the letter <i>Z</i> the string can be anything. Taking the string can be simplified to this:</p>
  <p>
    <font face="'Courier New'">"&gt;&lt;XYZ&gt;</font>
  </p>
  <p>The server might reply with:</p>
  <p>
    <font face="'Courier New'">&lt;input type="text" name="keyword" id="keyword" maxlength="255" value=<a name="line1631"></a>""&gt;&lt;XYZ&gt;" style="height:10px; color:#000;" /&gt;</font>
  </p>
  <h2>Try to display an alert box</h2>
  <p>The following goal is to execute a script and the easiest script to test is the one shown in the first scenario that displays an alert box. Note that now the tester knows that the malicious sting needs to start with the <i>&gt;</i> character, due to where in the HTML document it will appear:</p>
  <p>
    <font face="'Courier New'">"&gt;&lt;script&gt;alert('Works')&lt;/script&gt;</font>
  </p>
  <p>If the server doesn't filter the <i>SCRIPT </i>tags then an alert box will appear. The code sent back to the tester will look like this.</p>
  <p>
    <font face="'Courier New'">&lt;input type="text" name="keyword" id="keyword" maxlength="255" value=<a name="line16311"></a>""&gt;&lt;script&gt;alert('Works')&lt;/script&gt;" style="height:10px; color:#000;" /&gt;</font>
  </p>
  <h2>Cover different tags</h2>
  <p>Sometimes severs filter out the string <i>&lt;script&gt;</i> from their output. If the server doesn't allow script tags, try the <i>img </i>tag and put your code in the <i>src </i>property:</p>
  <p>
    <font face="'Courier New'">&lt;img src="javascript:alert('Works');"&gt;&lt;/img&gt;</font>
  </p>
  <p>In fact, there are many other tags known to be dangerous in some cases, such as <i>&lt;iframe&gt;, &lt;body&gt;, &lt;embed&gt;, &lt;meta&gt;, &lt;html&gt;, &lt;frame&gt;, &lt;frameset&gt;, &lt;input&gt;, &lt;layer&gt;, &lt;object&gt;</i>, and <i>&lt;style&gt;</i>. </p>
  <p>A good choice is to try the following that doesn't require script tags or the JavaScript command:</p>
  <p>
    <font face="'Courier New'">&lt;body onload=alert('Works')&gt;</font>
  </p>
  <h1>
    <b>Step 4: Tune Test Case Data&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </b>
  </h1>
  <p>During this step testing is focused at covering all entry points and tuning test case data based on the format of the specific entry point.&amp;nbsp;&amp;nbsp; </p>
  <h2>Consider string format and encoding according to entry point</h2>
  <p>The example in step 3 doesn't specify how the fuzz string was passed to the application (it can be assumed that it was through a web form for these purposes). During this step, testers need to go through their list of components and entry points and modify test case data according to the entry point. Make sure that all entry points are covered.</p>
  <h2>Web Forms</h2>
  <p>Web forms are the easiest to test since they commonly allow only ASCII strings. To test through this entry point, just go through the high risk component list looking for ones that have web forms. Then use a web browser to submit test strings to the components via the forms, and possibly an attack proxy like <i>Burp Suite</i> to circumvent any client-side JavaScript used for data validation.</p>
  <h2>URL Contents</h2>
  <p>A web application is vulnerable to XSS through the value passed in the password variable:&amp;nbsp;</p>
  <p>
    <font face="'Courier New'">http://www.xvulnerablesite.com/login.asp?username=[value]&amp;password=[value]</font>
  </p>
  <p>If testers want to test the following string in the password value:&amp;nbsp;</p>
  <p>
    <font face="'Courier New'">&lt;script&gt;alert('Works')&lt;/script&gt;</font>
  </p>
  <p>They will need to modify the above URL in this way:</p>
  <p>
    <font face="'Courier New'">http://www.xvulnerablesite.com/login.asp?username=any&amp;password=&lt;script&gt;alert('Works')&lt;/script&gt;</font>
  </p>
  <p>When executing test cases through the URL it is important to try different encodings of the test string. For instance, one can execute the first attack string below and it causes no effect. Then execute the second one and the alert box works. In this case the web application didn't allow the symbol characters (except the round brackets) in ASCII but did in their hexadecimal encodings:&amp;nbsp;</p>
  <p>
    <font face="'Courier New'">&lt;img src="javascript:alert('Works');"&gt;</font>
  </p>
  <p>
    <font face="'Courier New'">http://www.xvulnerablesite.com/login.asp?username=any&amp;password=&lt;img%20src%3d%22javascript:alert(%27Works%27)%22&gt;</font>
  </p>
  <p>When testing through the URL and sometimes in other places, it is necessary to investigate what type of encodings the server is using and modify test cases according to them.</p>
  <h2>Cookie contents</h2>
  <p>Sometimes the application blindly displays the contents of a cookie in the web browser.&amp;nbsp;To test the risky component through this entry point we have to modify the cookie file in disk and try to inject a simple script, then restart the browser to see if an alert box appears. Alternately, an attack proxy can be used to perform this modification on the fly, which is especially helpful in the case of complicated applications.</p>
  <h2>Flash Parameters</h2>
  <p>Since Flash parameters are frequently passed in the URL, testing Flash parameters is similar to testing URL contents. Here, it is necessary to go through each parameter in the URL and see how the application reacts. Flash also frequently receives parameters using <i>FlashVars</i>. Consider the following code to load a Flash movie:</p>
  <p>
    <font face="'Courier New'">&lt;object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"<br />&amp;nbsp;codebase="http://macromedia.com/cabs/swflash.cab#version=6,0,0,0"<br />&amp;nbsp;width="250" height="250" id="flaMovie1" align="center"&gt;<br />&amp;nbsp;&lt;param name=movie value="flaMovie1.swf"&gt;<br />&amp;nbsp;&lt;param name=FlashVars value="inputURL=usersinput"&gt;<br />&amp;nbsp;&lt;param name=quality value=high&gt;<br />&amp;nbsp;&lt;param name=bgcolor value=#ffffff&gt;<br />&amp;nbsp;&lt;embed src="flaMovie1.swf" FlashVars="inputURL=usersinput"<br />&amp;nbsp; quality="high" bgcolor="#ffffff" width="250" height="250"<br />&amp;nbsp; name="flaMovie1" align type="application/x-shockwave-flash"<br />&amp;nbsp; pluginspage="http://www.macromedia.com/go/getflashplayer"&gt;<br />&lt;/object&gt;</font>
  </p>
  <p>During this step, testers will need to change the entry parameters to Flash like this:</p>
  <p>
    <font face="'Courier New'">&lt;object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"<br />&amp;nbsp;codebase="http://macromedia.com/cabs/swflash.cab#version=6,0,0,0"<br />&amp;nbsp;width="250" height="250" id="flaMovie1" align="CENTER"&gt;<br />&amp;nbsp;&lt;param name=movie value="flaMovie1.swf"&gt;<br />&amp;nbsp;&lt;param name=FlashVars value="inputURL=%3cscript%3ealart%28%b4XSS%b4%29%3c%2fscript%3e"&gt;<br />&amp;nbsp;&lt;param name=quality value=high&gt;<br />&amp;nbsp;&lt;para name=bgcolor value=#ffffff&gt;<br />&amp;nbsp;&lt;embed src="flaMovie1.swf" FlashVars="inputURL=%3CSCRIPT%3Ealert%28%B4XSS%B4%29%3C%2FSCRIPT%3E"<br />&amp;nbsp; quality="high" bgcolor="#ffffff" width="250" height="250"<br />&amp;nbsp; name="flaMovie1" align type="application/x-shockwave-flash"<br />&amp;nbsp; pluginspage="http://www.macromedia.com/go/getflashplayer"&gt;<br />&lt;/object&gt;</font>
  </p>
  <h2>Graphical User Interface</h2>
  <p>Testing through the UI is similar to web form testing in that the tester enters test values directly to the screen. In the case of GUI testing the application used is not a web browser but any other application that interacts with high risk components, renders HTML, and that allows user input or otherwise receives untrusted data.<b></b></p>
  <h2>Look for additional entry points</h2>
  <p>Each application has its own set of entry points. This article lists the common ones for XSS attacks. Nonetheless, testers must explore their application for additional ways of passing data that might make it into a XSS vulnerability. It is recommended to use system monitoring tools such as the ones from <i>www.sysinternals.com</i> and dedicated attack tools such as <i>Burp</i> proxy that lets you intercept and add match-and-replace rules to change the contents of HTTP packets.</p>
  <h2>Keep tuning test cases </h2>
  <p>Sometimes the initial test string can land in a part of the source code where XSS is possible without using a script tag. The tester may be able to pad it a little or maybe just write the JavaScript command. Always check if the initial input lands inside or within an actual command or parameter.</p>
  <h2>Consider the case of persistent XSS</h2>
  <p>Sometimes the tester won't see the results of test cases right away. An XSS bug might exist that takes malicious input and only sends it back if the attacker does something else like visiting another page, for instance. Such is often the case with a persistent XSS attack.</p>
  <p>Consider the following case. An application asks for a user's password hint. When the server prompts the user for the hint, the attacker types one of the XSS test strings described before. Then submits the registration but the server doesn't show the alert box. Then the attacker has the victim browse the site's password page and ask for the hint. When the site displays the hint the alert box appears.&amp;nbsp; </p>
  <p>While testing persistent XSS, testers must think of all the places where the input might end up and check all of them. They should talk to developers and use specifications to check all data stores where a persistent XSS bug can manifest.</p>
  <h1>Conclusions</h1>
  <p>Testing for XSS bugs is not complicated but you need to be thorough. It is important that you go through all the places where your web server renders HTML output. There are many strings to try, many tags to look at, different methods to feed the test data, and even room for automation. However, the most important thing to keep in mind is to follow your test data. Don't just look for the alert box, but look at the code that comes back to you. Successful XSS testing is all about knowing how to tune you test case data.</p>
  <h1>Additional Resources&amp;nbsp;</h1>
  <ul>
    <li>For a Cross Site Scripting Cheat Sheet, see&amp;nbsp;<a href="http://ha.ckers.org/xss.html">http://ha.ckers.org/xss.html</a></li>
    <li>For information about testing applications for Cross-Site Scripting vulnerabilities, see&amp;nbsp;<a href="http://www.microsoft.com/technet/community/columns/secmvp/sv0505.mspx">http://www.microsoft.com/technet/community/columns/secmvp/sv0505.mspx</a></li>
    <li>For information about fuzz vectors, see&amp;nbsp;<a href="http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors">http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors</a></li>
    <li>For information about fuzz testing, see&amp;nbsp;<a href="http://en.wikipedia.org/wiki/Fuzz_testing">http://en.wikipedia.org/wiki/Fuzz_testing</a>&amp;nbsp;</li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>