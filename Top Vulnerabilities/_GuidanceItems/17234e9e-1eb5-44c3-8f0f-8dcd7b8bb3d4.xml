<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1341561831" Content_Hash="357083830">
  <Metadata>
    <Id>17234e9e-1eb5-44c3-8f0f-8dcd7b8bb3d4</Id>
    <Id_History>4940a340-62a3-4dc5-8d2d-3b5e3a4dc5b9,</Id_History>
    <Library_Id>386553fa-9f33-4b11-b0bc-eb64b8d787ce</Library_Id>
    <Title>Hash And Salt Passwords</Title>
    <Category>Encryption</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET</Technology>
    <Type>Guideline</Type>
    <DirectLink>Hash And Salt Passwords</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <ul>
    <li>ASP.NET 4.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Hash and salt passwords for storage.</p>
  <h1>Why</h1>
  <p>Hashing passwords makes it harder for an attacker to compromise them. Salting the hash exponentially increases the computational resources required for brute-forcing the stored passwords.</p>
  <h1>When</h1>
  <p>Hash and salt stored passwords if your application implements custom authentication controls.</p>
  <h1>How</h1>
  <p>To hash and salt passwords:</p>
  <ol>
    <li>
      <p>
        <strong>Decide if you have to store passwords.</strong> Consider using the authentication controls provided by the platform. If you use the ASP.NET authentication controls, stored passwords will automatically be hashed and salted. If ASP.NET controls don't satisfy your application requirements, then hash and salt passwords using APIs in the <em>System.Security.Cryptography</em> namespace.</p>
    </li>
    <li>
      <p>
        <strong>Compute a salt for each password.</strong> You can compute the salt value by using the <em>RNGCryptoServiceProvider</em> class, as shown in the following code example. </p>
      <pre>using System.Security.Cryptography;<br />...<br />private static string CreateSalt(int size){<br />    // Generate a cryptographic random number using the cryptographic <br />    // service provider<br />    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();<br />    byte[] buff = new byte[size];<br />    rng.GetBytes(buff);<br />    // Return a Base64 string representation of the random number<br />    return Convert.ToBase64String(buff);<br />}  </pre>
      <p>
        <b>Note:</b>&amp;nbsp;If you use the ASP.NET SQL Server membership provider, you can configure it to store password hashes with added salt by setting <em>passwordFormat="Hashed"</em> on the provider configuration.&amp;nbsp;</p>
    </li>
    <li>
      <p>
        <strong>Combine the password and the salt.</strong>&amp;nbsp;Combine each password with the corresponding salt by using simple concatenation.</p>
    </li>
    <li>
      <p>
        <strong>Choose a number of times to iterate the hash</strong>. This increases the computation time of the final hash. This can help prevent issues such as rainbow table attacks, since the time to calculate one hash iterated many times is relatively small, but to perform this same calculation for many passwords is relatively large. </p>
    </li>
    <li>
      <p>
        <strong>Hash the password and the salt.</strong> Combine each password with the corresponding salt by using simple concatenation. The following code example shows how to use a hashing algorithm, such as SHA256, to hash data. </p>
      <pre>using System.Security.Cryptography;<br />...<br />// Create a new instance of the hash crypto service provider.<br />HashAlgorithm hashAlg = new SHA256CryptoServiceProvider(); <br />// Convert the data to hash to an array of Bytes.<br />byte[] bytValue = System.Text.Encoding.UTF8.GetBytes(stringDataToHash);<br />// Compute the Hash. This returns an array of Bytes.<br />byte[] bytHash = hashAlg.ComputeHash(bytValue);<br />// Optionally, represent the hash value as a base64-encoded string, <br />// For example, if you need to display the value or transmit it over a network.<br />string base64 = Convert.ToBase64String(bytHash);</pre>
    </li>
    <li>
      <p>
        <strong>Store the hash and the salt.</strong> Store the computed hash and the corresponding salt in the location of your choosing. Make sure to store the salt along with the hash, because the salt is necessary for computing hashes when checking user entered passwords.</p>
    </li>
  </ol>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>